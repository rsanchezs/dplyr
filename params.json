{
  "name": "Dplyr",
  "tagline": "Curso del paquete dplyr",
  "body": "# Manipulación de datos en R con dplyr\r\n\r\n![](https://rstudioblog.files.wordpress.com/2014/10/datacamp-dplyr.png?w=539&h=311)\r\n\r\n# Data frames\r\n\r\nEl __data frame__ es una estructura de datos muy importante en __R__. La estructura de un data frame consiste en que cada fila representa un observación y que cada columna representa una variable, medida o característica de dicha observación.\r\n\r\nDada la importancia de los data frames, es importante poseer un conjunto de herramientas para trabajar con los mismos. En capítulos anteriores hemos discutido algunas herramientas como la función ___subset()___ y el uso de los operadores ___[___ y ___$___ para extraer subconjuntos de datos en data frames. Sin embargo, otras operaciones, como filtros, reordenar, etc. pueden ser a menudo una labor tediosa. El paquete __dplyr__ esta diseñado para mitigar muchos de los problemas y proporcionarnos un conjunto de rutinas altamente optimizadas para el manejo de data frames. \r\n\r\n# El paquete dplyr\r\n\r\nEl paquete __dplyr__ fue desarrollado por Hadley Wickham de RStudio y es un versión optimizada de su paquete __plyr__. El paquete __dplyr__ no proporciona ninguna nueva funcionalidad a __R__ per se, en el sentido que todo aquello que podemos hacer con __dplyr__ lo podríamos hacer con la sintaxis básica de __R__.\r\n\r\nUna importante contribución del paquete __dplyr__ es que proporciona una \"gramática\" (particularmente verbos) para la manipulación y operaciones con data frames. Con esta gramática podemos comunicar mediante nuestro código que es lo que estamos haciendo en los data frames a otras personas (asumiendo que conozcan la gramática). Esto es muy útil, ya que proporciona una abstracción que anteriormente no existía. Por último, cabe destacar que las funciones del paquete __dplyr__ son muy rápidas, puesto que están implementadas con el lenguaje C++.\r\n\r\n# La grámatica de dplyr\r\n\r\nAlgunas de los principales \"verbos\" del paquete __dplyr__ son:\r\n\r\n+ ___select___: devuelve un conjunto de columnas\r\n+ ___filter___: devuelve un conjunto de filas según una o varias condiciones lógicas\r\n+ ___arrange___: reordena filas de un data frame\r\n+ ___rename___: renombra variables en una data frame\r\n+ ___mutate___: añade nuevas variables/columnas o transforma variables existentes\r\n+ ___summarise/summarize___: genera resúmenes estadísticos de diferentes variables en el data frame, posiblemente con _strata_\r\n+ ___%>%__ : el operador \"pipe\"  es usado para conectar múltiples acciones en una única \"pipeline\" (tubería)\r\n\r\n# Argumentos comúnes en las funciones dplyr\r\n\r\nTodas las funciones que discutiremos en este capítulo tienen en común una serie de argumentos. En particular,\r\n\r\n1. El primer argumento es el data frame\r\n2. Los otros argumentos describen que hacer con el data frame especificado en el primer argumento, podemos referirnos a las columnas en el data frame directamente sin utilizar el operador $, es decir sólo con el nombre de la columna/variable.\r\n3. El valor de retorno es un nuevo data frame.\r\n4.  Los data frames deben estar bien organizados/estructurados, es decir debe existir una observación por columna y, cada columna representar una variable, medida o característica de esa observación. Para ello, es muy útil es uso del paquete __tidy__. (lo veremos en capítulos posteriores).\r\n\r\n# Instalación del paquete __dplyr__\r\n\r\nPodemos instalar el paquete desde CRAN o desde GitHub.\r\n\r\n```\r\n## Instalación desde CRAN\r\ninstall.packages(\"dplyr\")\r\n\r\n```\r\n\r\n```\r\n## Instalación desde GitHub\r\nlibrary(devtools)\r\ninstall_github(\"hadley/dplyr\")\r\n\r\n```\r\nDespués de la instalación es importante que lo carguemos en nuestra sesión __R__ :\r\n\r\n\r\n```r\r\nlibrary(dplyr)\r\n```\r\n\r\n\r\nEs posible que cuando carguemos el paquete nos aparezcan una serie de _warnings_, esto es debido que el paquete tiene funciones con el mismo nombre que en otros paquetes. Por el momento haremos caso omiso  a estos avisos.\r\n\r\nRecomiendamos consultar la documentación de las funciones:\r\n\r\n\r\n```r\r\n?select\r\n?filter\r\n?arrange\r\n?mutate\r\n?summarise\r\n?group_by\r\n```\r\n\r\n# select()\r\n\r\nLo primero sera instalar el paquete con el conjunto de datos que utilizaremos para los ejemplos:  \r\n\r\n\r\n\r\n```r\r\ninstall.packages(\"devtools\")\r\ndevtools::install_github(\"rstudio/EDAWR\")\r\n```\r\n\r\n\r\nTendremos que cargar la libreria para poder utilizarla:  \r\n\r\n\r\n\r\n```r\r\nlibrary(EDAWR)\r\n```\r\n\r\n\r\nPodemos echar un vistazo al conjunto de datos mediante __?__ or el comando __Viem()__:  \r\n\r\n\r\n\r\n```r\r\n?storms\r\n?cases\r\n?pollution\r\n?tb\r\nView(storms)\r\nView(cases)\r\nView(pollution)\r\nView(tb)\r\n```\r\n\r\n\r\nCon la función select podemos seleccionar columnas de un data frame:  \r\n\r\n\r\n![](https://github.com/rsanchezs/dplyr/blob/master/chapter1/select.PNG)  \r\n\r\nVisualizamos el contenido del data frame __storms__:\r\n\r\n\r\n\r\n```r\r\nstorms\r\n```\r\n\r\n```\r\n## Source: local data frame [6 x 4]\r\n## \r\n##     storm  wind pressure       date\r\n##     (chr) (int)    (int)     (date)\r\n## 1 Alberto   110     1007 2000-08-03\r\n## 2    Alex    45     1009 1998-07-27\r\n## 3 Allison    65     1005 1995-06-03\r\n## 4     Ana    40     1013 1997-06-30\r\n## 5  Arlene    50     1010 1999-06-11\r\n## 6  Arthur    45     1010 1996-06-17\r\n```\r\n\r\nPara seleccionar las variables __storm__ y __pressure__ del data frame ejecutaremos la siguiente instrucción:  \r\n\r\n\r\n```r\r\nselect(storms, storm, pressure)\r\n```\r\n\r\n```\r\n## Source: local data frame [6 x 2]\r\n## \r\n##     storm pressure\r\n##     (chr)    (int)\r\n## 1 Alberto     1007\r\n## 2    Alex     1009\r\n## 3 Allison     1005\r\n## 4     Ana     1013\r\n## 5  Arlene     1010\r\n## 6  Arthur     1010\r\n```\r\n\r\n\r\nCon el guión __-__ podemos excluir una columna:  \r\n\r\n\r\n![](https://github.com/rsanchezs/dplyr/blob/master/chapter1/select1.PNG)  \r\n\r\n\r\n\r\n```r\r\nselect(storms, -storm)\r\n```\r\n\r\n```\r\n## Source: local data frame [6 x 3]\r\n## \r\n##    wind pressure       date\r\n##   (int)    (int)     (date)\r\n## 1   110     1007 2000-08-03\r\n## 2    45     1009 1998-07-27\r\n## 3    65     1005 1995-06-03\r\n## 4    40     1013 1997-06-30\r\n## 5    50     1010 1999-06-11\r\n## 6    45     1010 1996-06-17\r\n```\r\n\r\n\r\nPodemos utilizar la notación __:__ para seleccionar un rango de columnas:  \r\n\r\n\r\n![](https://github.com/rsanchezs/dplyr/blob/master/chapter1/select2.PNG)  \r\n\r\n\r\n\r\n```r\r\nselect(storms, wind:date)\r\n```\r\n\r\n```\r\n## Source: local data frame [6 x 3]\r\n## \r\n##    wind pressure       date\r\n##   (int)    (int)     (date)\r\n## 1   110     1007 2000-08-03\r\n## 2    45     1009 1998-07-27\r\n## 3    65     1005 1995-06-03\r\n## 4    40     1013 1997-06-30\r\n## 5    50     1010 1999-06-11\r\n## 6    45     1010 1996-06-17\r\n```\r\n\r\n\r\nUtilizando los operadores __-__ y __:__ de forma conjunta  podemos hacer cosas como estas:  \r\n\r\n\r\n\r\n```r\r\nselect(storms, -(storm:wind))\r\n```\r\n\r\n```\r\n## Source: local data frame [6 x 2]\r\n## \r\n##   pressure       date\r\n##      (int)     (date)\r\n## 1     1007 2000-08-03\r\n## 2     1009 1998-07-27\r\n## 3     1005 1995-06-03\r\n## 4     1013 1997-06-30\r\n## 5     1010 1999-06-11\r\n## 6     1010 1996-06-17\r\n```\r\n\r\n\r\nEl paquete dplyr proporciona una serie de funciones que nos pueden facilitar mucho nuestro trabajo, como por ejemplo:  \r\n\r\n\r\n\r\n```r\r\n#Selecciona columnas cuyo nombre contiene un string\r\nselect(storms,starts_with(\"w\"))\r\n```\r\n\r\n```\r\n## Source: local data frame [6 x 1]\r\n## \r\n##    wind\r\n##   (int)\r\n## 1   110\r\n## 2    45\r\n## 3    65\r\n## 4    40\r\n## 5    50\r\n## 6    45\r\n```\r\n\r\n\r\n\r\n```r\r\n#Selecciona columnas cuyo nombre termina con un string\r\nselect(storms, ends_with(\"e\"))\r\n```\r\n\r\n```\r\n## Source: local data frame [6 x 2]\r\n## \r\n##   pressure       date\r\n##      (int)     (date)\r\n## 1     1007 2000-08-03\r\n## 2     1009 1998-07-27\r\n## 3     1005 1995-06-03\r\n## 4     1013 1997-06-30\r\n## 5     1010 1999-06-11\r\n## 6     1010 1996-06-17\r\n```\r\n\r\n\r\n\r\n```r\r\n#Selecciona todas las columnas\r\nselect(storms, everything())\r\n```\r\n\r\n```\r\n## Source: local data frame [6 x 4]\r\n## \r\n##     storm  wind pressure       date\r\n##     (chr) (int)    (int)     (date)\r\n## 1 Alberto   110     1007 2000-08-03\r\n## 2    Alex    45     1009 1998-07-27\r\n## 3 Allison    65     1005 1995-06-03\r\n## 4     Ana    40     1013 1997-06-30\r\n## 5  Arlene    50     1010 1999-06-11\r\n## 6  Arthur    45     1010 1996-06-17\r\n```\r\n\r\n\r\n\r\n```r\r\n#Selecciona columnas cuyo nombres contienen un string\r\nselect(storms, contains(\"essure\"))\r\n```\r\n\r\n```\r\n## Source: local data frame [6 x 1]\r\n## \r\n##   pressure\r\n##      (int)\r\n## 1     1007\r\n## 2     1009\r\n## 3     1005\r\n## 4     1013\r\n## 5     1010\r\n## 6     1010\r\n```\r\n\r\n\r\n\r\n\r\nA continuación mostramos un resumen de las funciones para __select__ que nos serán muy útiles:  \r\n\r\n\r\n\r\n|        | *A partir de la tercera fila son funciones propias del paquete dply |\r\n| :---: | :---: |\r\n| __-__ | Selecciona todas las variables excepto|\r\n| __:__ | Selecciona un rango |\r\n| __contains()__ | Selecciona variables cuyo nombre contiene la cadena de texto |\r\n| __ends_with()__ | Selecciona variables cuyo nombre termina con la cadena de caracteres |\r\n| __everything()__ | Selecciona todas las columnas |\r\n| __matches()__ | Selecciona las variables cuyos nombres coinciden con una expresión regular |\r\n| __num_range()__ | Selecciona las variables por posición |\r\n| __one_of()__ | Selecciona variables cuyos nombres están en un grupo de nombres |\r\n| __start_with()__ | Selecciona variables cuyos nombres empiezan con la cadena de caracteres |\r\n\r\n\r\n# filter()\r\n\r\nLa función __filter__ nos permite filtrar filas según una condición:  \r\n\r\n\r\n\r\n![](https://github.com/rsanchezs/dplyr/blob/master/chapter1/filter.PNG)  \r\n\r\n\r\n\r\n```r\r\n> filter(storms, wind >= 50)\r\n```\r\n\r\n```\r\nSource: local data frame [3 x 4]\r\n\r\n    storm  wind pressure       date\r\n    (chr) (int)    (int)     (date)\r\n1 Alberto   110     1007 2000-08-03\r\n2 Allison    65     1005 1995-06-03\r\n3  Arlene    50     1010 1999-06-11\r\n```\r\n\r\n\r\n\r\nSe pueden incluir varias condiciones en un mismo filtro: \r\n\r\n\r\n![](https://github.com/rsanchezs/dplyr/blob/master/chapter1/filter1.PNG)  \r\n\r\n\r\n\r\n\r\n```r\r\n> filter(storms, wind >= 50, storm %in% c(\"Alberto\", \"Alex\", \"Allison\"))\r\n```\r\n\r\n```\r\nSource: local data frame [2 x 4]\r\n\r\n    storm  wind pressure       date\r\n    (chr) (int)    (int)     (date)\r\n1 Alberto   110     1007 2000-08-03\r\n2 Allison    65     1005 1995-06-03\r\n```\r\n\r\n\r\n  \r\n  \r\nLas condiciones pueden ser expresiones logicas construidas mediante los operadores relacionales y lógicos:  \r\n\r\n\r\n\r\n|     |  ?Comparison |\r\n| :---: | :---: |\r\n| < | Menor que |\r\n| > | Mayor que |\r\n| == | Igual que |\r\n| <= | Menor o igual que |\r\n| >= | Mayor o igual que |\r\n| != | Diferente que |\r\n| %in% | Pertenece al conjunto |\r\n| is.na | Es NA |\r\n| !is.na | No es NA |  \r\n\r\n\r\n\r\n\r\n|      | ?base::Logic |\r\n| :---: | :---: |\r\n| & | boolean and |\r\n| \\|  boolean o |\r\n| xor | or inclusivo |\r\n| ! | not |\r\n| any | cualquiera true |\r\n| all | todos verdaderos |  \r\n\r\n\r\n\r\n\r\nAsí por ejemplo, el siguiente ejemplo filtra aquellas filas con un __wind >= 50__ y __pressure < 1010__:  \r\n\r\n\r\n\r\n```r\r\n> filter(storms, wind>=50 & pressure<1010)\r\n```\r\n\r\n```\r\nSource: local data frame [2 x 4]\r\n\r\n    storm  wind pressure       date\r\n    (chr) (int)    (int)     (date)\r\n1 Alberto   110     1007 2000-08-03\r\n2 Allison    65     1005 1995-06-03\r\n```\r\n\r\n# arrange()\r\n\r\nLa función __arrange()__ se utiliza para ordenar las filas de un data frame de acuerdo a una o varias columnas/variables.  \r\n\r\n\r\nPor defecto __arrange()__ ordena las filas por orden ascendente:  \r\n\r\n![](https://github.com/rsanchezs/dplyr/blob/master/chapter1/arrange.PNG)  \r\n\r\nEchemos un vistazo al data frame __arrange__:\r\n\r\n\r\n\r\n```r\r\n> storms\r\n```\r\n\r\n```\r\nSource: local data frame [6 x 4]\r\n\r\n    storm  wind pressure       date\r\n    (chr) (int)    (int)     (date)\r\n1 Alberto   110     1007 2000-08-03\r\n2    Alex    45     1009 1998-07-27\r\n3 Allison    65     1005 1995-06-03\r\n4     Ana    40     1013 1997-06-30\r\n5  Arlene    50     1010 1999-06-11\r\n6  Arthur    45     1010 1996-06-17\r\n```\r\n\r\nPara ordenar las filas por la variable __wind__ de forma ascendente podemos hacer lo siguiente:  \r\n\r\n\r\n```r\r\n> arrange(storms, wind)\r\n```\r\n\r\n```\r\nSource: local data frame [6 x 4]\r\n\r\n    storm  wind pressure       date\r\n    (chr) (int)    (int)     (date)\r\n1     Ana    40     1013 1997-06-30\r\n2    Alex    45     1009 1998-07-27\r\n3  Arthur    45     1010 1996-06-17\r\n4  Arlene    50     1010 1999-06-11\r\n5 Allison    65     1005 1995-06-03\r\n6 Alberto   110     1007 2000-08-03\r\n```\r\n\r\n  \r\nSi las queremos ordenar de forma ascendente lo haremos del siguiente modo:  \r\n\r\n![](https://github.com/rsanchezs/dplyr/blob/master/chapter1/arrange1.PNG)  \r\n\r\n\r\n\r\n```r\r\n> arrange(storms, desc(wind))\r\n```\r\n\r\n```\r\nSource: local data frame [6 x 4]\r\n\r\n    storm  wind pressure       date\r\n    (chr) (int)    (int)     (date)\r\n1 Alberto   110     1007 2000-08-03\r\n2 Allison    65     1005 1995-06-03\r\n3  Arlene    50     1010 1999-06-11\r\n4    Alex    45     1009 1998-07-27\r\n5  Arthur    45     1010 1996-06-17\r\n6     Ana    40     1013 1997-06-30\r\n```\r\n\r\n\r\nPodemos ordenar las filas según varias variables:  \r\n\r\n![](https://github.com/rsanchezs/dplyr/blob/master/chapter1/arrange2.PNG)  \r\n\r\n\r\n\r\n\r\n```r\r\n> storms\r\n```\r\n\r\n```\r\nSource: local data frame [6 x 4]\r\n\r\n    storm  wind pressure       date\r\n    (chr) (int)    (int)     (date)\r\n1 Alberto   110     1007 2000-08-03\r\n2    Alex    45     1009 1998-07-27\r\n3 Allison    65     1005 1995-06-03\r\n4     Ana    40     1013 1997-06-30\r\n5  Arlene    50     1010 1999-06-11\r\n6  Arthur    45     1010 1996-06-17\r\n```\r\n\r\n```r\r\n> arrange(storms, wind, date)\r\n```\r\n\r\n```\r\nSource: local data frame [6 x 4]\r\n\r\n    storm  wind pressure       date\r\n    (chr) (int)    (int)     (date)\r\n1     Ana    40     1013 1997-06-30\r\n2  Arthur    45     1010 1996-06-17\r\n3    Alex    45     1009 1998-07-27\r\n4  Arlene    50     1010 1999-06-11\r\n5 Allison    65     1005 1995-06-03\r\n6 Alberto   110     1007 2000-08-03\r\n```\r\n\r\n# rename()\r\n\r\nRenombrar una variable en un data frame es sorprendentemente en __R__ muy difícil de realizar. La función __rename()__ esta diseñada para hacer este proceso de una forma más fácil.  \r\n\r\nEchemos un vistazo a los nombres de las variables en el data frame __storms__:\r\n\r\n\r\n```r\r\n> names(storms)\r\n```\r\n\r\n```\r\n[1] \"storm\"    \"wind\"     \"pressure\" \"date\"    \r\n```\r\n\r\nPara cambiar los nombres de las variables en el data frame __storms__ a castellano, podriamos hacerlo de la forma siguiente:  \r\n\r\n\r\n```r\r\n> rename(storms, tormenta = storm, viento = wind, presion = pressure, fecha = date )\r\n```\r\n\r\n```\r\nSource: local data frame [6 x 4]\r\n\r\n  tormenta viento presion      fecha\r\n     (chr)  (int)   (int)     (date)\r\n1  Alberto    110    1007 2000-08-03\r\n2     Alex     45    1009 1998-07-27\r\n3  Allison     65    1005 1995-06-03\r\n4      Ana     40    1013 1997-06-30\r\n5   Arlene     50    1010 1999-06-11\r\n6   Arthur     45    1010 1996-06-17\r\n```\r\n\r\n\r\n# mutate()\r\n\r\nCon la función __mutate()__ podemos computar tranformaciones de variables en un data frame. A menudo, tendremos la necesidad de crear nuevas variables que se calculan a partir de variables existentes,__mutate()__ nos proporciona una interface clara para realizar este tipo de operaciones.  \r\n\r\n\r\nAsí por ejemplo si deseamos calcular el ratio entre _pressure_ y _wind_:  \r\n![](https://github.com/rsanchezs/dplyr/blob/master/chapter1/mutate.PNG)  \r\n\r\nEchemos un vistazo al data frame __storms__:\r\n\r\n\r\n\r\n```r\r\n> storms\r\n```\r\n\r\n```\r\nSource: local data frame [6 x 4]\r\n\r\n    storm  wind pressure       date\r\n    (chr) (int)    (int)     (date)\r\n1 Alberto   110     1007 2000-08-03\r\n2    Alex    45     1009 1998-07-27\r\n3 Allison    65     1005 1995-06-03\r\n4     Ana    40     1013 1997-06-30\r\n5  Arlene    50     1010 1999-06-11\r\n6  Arthur    45     1010 1996-06-17\r\n```\r\n\r\nA continuación podemos crear una nueva varible __ratio__ con el ratio entre la presión y el viento:  \r\n\r\n\r\n```r\r\n> mutate(storms, ratio = pressure/wind)\r\n```\r\n\r\n```\r\nSource: local data frame [6 x 5]\r\n\r\n    storm  wind pressure       date     ratio\r\n    (chr) (int)    (int)     (date)     (dbl)\r\n1 Alberto   110     1007 2000-08-03  9.154545\r\n2    Alex    45     1009 1998-07-27 22.422222\r\n3 Allison    65     1005 1995-06-03 15.461538\r\n4     Ana    40     1013 1997-06-30 25.325000\r\n5  Arlene    50     1010 1999-06-11 20.200000\r\n6  Arthur    45     1010 1996-06-17 22.444444\r\n```\r\n\r\n\r\nLa función __mutate()__ nos permite encadenar varias expresiones en una misma sentencia: \r\n\r\n![](https://github.com/rsanchezs/dplyr/blob/master/chapter1/mutate1.PNG)  \r\n\r\n\r\n\r\n\r\n```r\r\n> mutate(storms, ratio=pressure/wind, inverse=ratio^-1)\r\n```\r\n\r\n```\r\nSource: local data frame [6 x 6]\r\n\r\n    storm  wind pressure       date     ratio    inverse\r\n    (chr) (int)    (int)     (date)     (dbl)      (dbl)\r\n1 Alberto   110     1007 2000-08-03  9.154545 0.10923535\r\n2    Alex    45     1009 1998-07-27 22.422222 0.04459861\r\n3 Allison    65     1005 1995-06-03 15.461538 0.06467662\r\n4     Ana    40     1013 1997-06-30 25.325000 0.03948667\r\n5  Arlene    50     1010 1999-06-11 20.200000 0.04950495\r\n6  Arthur    45     1010 1996-06-17 22.444444 0.04455446\r\n```\r\n\r\n\r\nPodemos utilizar funciones de otros paquetes como resultado de una nueva columna/variable, así por ejemplo si queremos calcular la _distribución de frecuencias absolutas acumuladas_ de la variable _wind_ podríamos utilizar la función _cumsum()_ del paquete _bas_:  \r\n\r\n\r\n\r\n```r\r\n> mutate(storms, freq.acumulative = cumsum(wind))\r\n```\r\n\r\n```\r\nSource: local data frame [6 x 5]\r\n\r\n    storm  wind pressure       date freq.acumulative\r\n    (chr) (int)    (int)     (date)            (int)\r\n1 Alberto   110     1007 2000-08-03              110\r\n2    Alex    45     1009 1998-07-27              155\r\n3 Allison    65     1005 1995-06-03              220\r\n4     Ana    40     1013 1997-06-30              260\r\n5  Arlene    50     1010 1999-06-11              310\r\n6  Arthur    45     1010 1996-06-17              355\r\n```\r\n\r\n\r\n##  Summarise\r\n\r\nLa función __summarise()__ funciona de forma análoga a la función [mutate](mutate.md), excepto que en lugar de añadir nuevas columnas crea un nuevo data frame.  \r\n\r\n\r\nAsí por ejemplo, ara calcular la mediana y la varianza de la variable _amount_ en el conjunto de datos _pollution_:  \r\n\r\n![](https://github.com/rsanchezs/dplyr/blob/master/chapter1/summarise.PNG)  \r\n\r\nEchemos un vistazo al data frame __pollution__:  \r\n\r\n\r\n```r\r\npollution\r\n```\r\n\r\n```\r\n##       city  size amount\r\n## 1 New York large     23\r\n## 2 New York small     14\r\n## 3   London large     22\r\n## 4   London small     16\r\n## 5  Beijing large    121\r\n## 6  Beijing small     56\r\n```\r\n\r\nPara obtener un resumen con la mediana y la varianza de la variable __amount__ podemos hacer lo siguiente:  \r\n\r\n\r\n```r\r\nsummarise(pollution, mediana = median(amount), variance = var(amount))\r\n```\r\n\r\n```\r\n##   mediana variance\r\n## 1    22.5   1731.6\r\n```\r\n\r\n\r\n\r\nPodemos utilizar el operador %>%, \r\n\r\n![](https://github.com/rsanchezs/dplyr/blob/master/chapter1/summarise1.PNG)  \r\n\r\n\r\n\r\n```r\r\npollution %>% summarise(mediana = median(amount), variance = var(amount))\r\n```\r\n\r\n```\r\n##   mediana variance\r\n## 1    22.5   1731.6\r\n```\r\n\r\nObsérvese que las dos formas de hacerlo devuelven el mismo resultado.  \r\n\r\n\r\n\r\nA continuación se muestran funciones que trabajando conjuntamente con la función __summarise()__ facilitarán nuestro trabajo diario. Las primeras pertenecen al paquete base y las otras son del paquete dplyr. Todas ellas toman como argumento un vector y devuelven un único resultado.  \r\n\r\n  \r\n  \r\n\r\n|    | base |\r\n| :---: | :---: |\r\n| min(), max() | Valores max y min |\r\n| mean() | media   |\r\n| median()| mediana |\r\n| sum() | suma de los valores  |\r\n| var, sd()  | varianza y desviación típica |  \r\n\r\n\r\n\r\n  \r\n\r\n|      | dplyr |\r\n| :---: | :---: |\r\n| first() | primer valor en un vector |\r\n| last() | el último valor en un vector |\r\n| n() | el número de valores en un vector |\r\n| n_distinct() | el número de valores distintos en un vector |\r\n| nth() | Extrar el valor que ocupa la posición _n_ en un vector |  \r\n\r\n\r\n# group_by()\r\n\r\nLa función __group_by()__  agrupa un conjunto de filas seleccionado en un conjunto de filas de resumen de acuerdo con los valores de una o más columnas o expresiones.\r\n\r\n![](https://github.com/rsanchezs/dplyr/blob/master/chapter1/groupby.PNG)  \r\n\r\nEchemos un vistazo al data frame __pollution__:\r\n\r\n\r\n```r\r\n> pollution\r\n```\r\n\r\n```\r\n      city  size amount\r\n1 New York large     23\r\n2 New York small     14\r\n3   London large     22\r\n4   London small     16\r\n5  Beijing large    121\r\n6  Beijing small     56\r\n```\r\n\r\nAgrupemos las observaciones por la variable __city__:  \r\n\r\n\r\n```r\r\n> group_by(pollution, city)\r\n```\r\n\r\n```\r\nSource: local data frame [6 x 3]\r\nGroups: city [3]\r\n\r\n      city  size amount\r\n     (chr) (chr)  (dbl)\r\n1 New York large     23\r\n2 New York small     14\r\n3   London large     22\r\n4   London small     16\r\n5  Beijing large    121\r\n6  Beijing small     56\r\n```\r\n  \r\n  \r\n\r\n\r\nLa función __group_by()__ es extremadamente útil trabajando en conjunción con la función __summarise()__:  \r\n\r\n\r\n![](https://github.com/rsanchezs/dplyr/blob/master/chapter1/groupbySummarise.PNG)  \r\n\r\n\r\n\r\n```r\r\n> pollution %>%  group_by(city) %>% \r\n+   summarise(mean = mean(amount), sum = sum(amount), n = n())\r\n```\r\n\r\n```\r\nSource: local data frame [3 x 4]\r\n\r\n      city  mean   sum     n\r\n     (chr) (dbl) (dbl) (int)\r\n1  Beijing  88.5   177     2\r\n2   London  19.0    38     2\r\n3 New York  18.5    37     2\r\n```\r\n\r\n## El operador pipe %>%\r\n\r\nEl operador pipeline __%>%__ es útil para concatenar múltiples _dplyr_ operaciones. Obsérvese en el siguiente ejemplo, que cada vez que queremos aplicar mas de una función, la instrucción es una secuencia de llamadas a funciones de forma anidada y que resulta ilegible:  \r\n\r\n\r\n\r\n```r\r\nthird(second(first(x)))\r\n```\r\n\r\n\r\n\r\nEste anidamiento no es una forma natural de expresar un secuencia de operaciones. El operador __%>%__ nos permite escribir una secuencia de operaciones de izquierda a derecha:  \r\n\r\n\r\n\r\n```r\r\nfirst(x) %>% second(x) %>% third(x)\r\n```\r\n\r\n\r\nObsérvese que las siguientes instrucciones, \r\n\r\n![](https://github.com/rsanchezs/dplyr/blob/master/chapter1/pipeline.PNG)  \r\n\r\n![](https://github.com/rsanchezs/dplyr/blob/master/chapter1/pipeline1.PNG)  \r\n\r\n\r\n\r\n\r\n```r\r\nselect(storms, storm, pressure)\r\n```\r\n\r\n```\r\n## Source: local data frame [6 x 2]\r\n## \r\n##     storm pressure\r\n##     (chr)    (int)\r\n## 1 Alberto     1007\r\n## 2    Alex     1009\r\n## 3 Allison     1005\r\n## 4     Ana     1013\r\n## 5  Arlene     1010\r\n## 6  Arthur     1010\r\n```\r\n\r\n```r\r\nfilter(storms, wind >= 50)\r\n```\r\n\r\n```\r\n## Source: local data frame [3 x 4]\r\n## \r\n##     storm  wind pressure       date\r\n##     (chr) (int)    (int)     (date)\r\n## 1 Alberto   110     1007 2000-08-03\r\n## 2 Allison    65     1005 1995-06-03\r\n## 3  Arlene    50     1010 1999-06-11\r\n```\r\n\r\n\r\nes lo mismo que,  \r\n\r\n\r\n\r\n```r\r\nstorms %>% select(storm, pressure)\r\n```\r\n\r\n```\r\n## Source: local data frame [6 x 2]\r\n## \r\n##     storm pressure\r\n##     (chr)    (int)\r\n## 1 Alberto     1007\r\n## 2    Alex     1009\r\n## 3 Allison     1005\r\n## 4     Ana     1013\r\n## 5  Arlene     1010\r\n## 6  Arthur     1010\r\n```\r\n\r\n```r\r\nstorms %>% filter(wind >= 50)\r\n```\r\n\r\n```\r\n## Source: local data frame [3 x 4]\r\n## \r\n##     storm  wind pressure       date\r\n##     (chr) (int)    (int)     (date)\r\n## 1 Alberto   110     1007 2000-08-03\r\n## 2 Allison    65     1005 1995-06-03\r\n## 3  Arlene    50     1010 1999-06-11\r\n```\r\n\r\n\r\nEs en el siguiente ejemplo donde podemos observar el verdadero potencial del operador pipeline:  \r\n\r\n![](https://github.com/rsanchezs/dplyr/blob/master/chapter1/pipeline2.PNG)  \r\n\r\n\r\n\r\n```r\r\nstorms %>%\r\n  filter(wind>=50) %>%\r\n  select(storm, pressure)\r\n```\r\n\r\n```\r\n## Source: local data frame [3 x 2]\r\n## \r\n##     storm pressure\r\n##     (chr)    (int)\r\n## 1 Alberto     1007\r\n## 2 Allison     1005\r\n## 3  Arlene     1010\r\n```\r\n\r\n  \r\n  \r\n\r\n> El atajo de teclado para el operador __%>%__ es  \r\n\r\n\r\n![](https://github.com/rsanchezs/dplyr/blob/master/chapter1/pipelineShortcut.PNG)\r\n\r\n\r\n\r\n\r\n#### Rubén Sánchez Sancho\r\n[rsanchezs@live.com](mailto:rsanchezs@live.com)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}